import UIKit

// ARC --> Automatique Reference Count
// D√©cide quand seront r√©f√©renc√©s et d√©f√©renc√©s les valeurs stock√©es en m√©moire
// D√®s qu'on cr√©er un objet (faire r√©f√©rence) l'ARC (qui fait partie du compilateur) alloue une partie de la m√©moire pour cette donn√©e
// D√®s qu'on d√©truit un objet (faire d√©r√©f√©rence) l'ARC d√©salloue la m√©moire afin d'√™tre utilis√© par d'autres *choses*
// Attention: si un objet √† √©t√© d√©sallou√© par l'ARC,  on ne pourra plus ac√©der √† son instance sinon l'app pourrait crash
// Cependant l'ARC traque toutes les propri√©t√©s strong, constante et variable qui font r√©f√©rence √† une instance, et cet objet ne sera pas d√©f√©renc√© (supprim√©) tant qu'il aura au moins encore une strong r√©f√©rence

// MARK: - Exemple
class Personn {
    var name: String
    
    init(name: String) {
        self.name = name
        print("\(name) is being initialized")
    }
    
    deinit {
        print("\(name) de l'exemple de l'ARC dealocaled, kill by the ARC. üò¢")
    }
}

// MARK: - Explication
// Trois type pour l'ARC:
// - strong: par d√©faut --> +1, prot√®ge l'objet d'√™tre d√©sallou√© par l'ARC, par d√©faut
// - weak: le type doit √™tre optionnel --> +0, compteur non incr√©ment√© peut √™tre donc possiblement nil (et ne fais pas -1 lorsqu'il est d√©f√©renc√©)
    // --> √Ä noter qu'une weak var ne pourra jamais √™tre une constant (let) sinon l'erreur suivante appara√Ætra:
        // "weak" must be a mutable variable, because it change at runtime
// - unowned: pareil que weak sauf que la variable ne doit pas √™tre optionnels --> + 0 (pas tr√®s utilis√© √† ma connaissance)
        // --> C√ÄD que la variable existera tant que la class parent sera allou√©
// MARK: La diff√©rence entre weak & unowned est un assez subtile (surtout pour les d√©butants) entrenez-vous c'est la meilleure des choses ;-)
    // weak: la propri√©t√© peut √™tre nil ou non --> explique le fait qu'elle doit obligatoirement √™tre une variable et pas une constante. La propri√©t√© peut exister ou non
    // unowned: la propri√©t√© doit obligatoirement avoir une valeur et cette propri√©t√© existera tant que la propri√©t√© parent existe
        // elle est reli√© indirectement √† l'√©tat de la propri√©t√© parent
        // Si la propri√©t√© parent est supprim√© de la m√©moire alors la propri√©t√© unowned sera √©galement supprim√© de la m√©moire



// Pour montrer la puissance de l'arc je vais faire uniquement des variables optionnels (car on peut les d√©initialiser facilement en faisant var = nil)
// √áa va √©galement vous d√©montrer la puissance des weak est sont utilis√© tr√®s r√©guli√®rement avec les types optionnels (car il peuvent d√©initialiser)
// Je ne vais pas utiliser de unowned reference dans cet exemple
// Lorsqu'une r√©f√©rence strong devient nil (d√©r√©f√©rence) -->  -1
// Pour les r√©f√©rences weak (et unowned) --> -0
var ref1: Personn?
var ref2: Personn?
var ref3: Personn?
weak var ref4: Personn? // Mark: weak var ici

// On initialise ref1 donc +1 pour Person (car de type strong)
ref1 = Personn(name: "Lucas") // count = 1 (une strong r√©f√©rence)
// Deux nouvel r√©f√©rence de type strong √† la m√™me r√©fenrence  --> +2 donc au total +3
ref2 = ref1 // count = 2 (deux strong r√©f√©rence)
ref3 = ref1 // count = 3 (trois strong r√©f√©rence)
ref4 = ref1 // count = toujours 3 (trois r√©f√©rences strong + une weak (0))
// On supprime une r√©f√©rence strong --> -1 donc +2 au count de l'objet, il est donc toujours maintenu dans la m√©moire par l'arc
ref1 = nil // count = 2 (deux strong r√©f√©rence) --> on notera que m√™me en mettant nil l'objet premier, on peut toujours acc√©der √† cet objet car comme il y a encore des r√©f √† cet objet il n'est donc pas supprim√© de la m√©moire.

// la preuve ici
print(ref2?.name)
print(ref3?.name)
print(ref4?.name)

ref2 = nil // count = 1 (une strong r√©f√©rence)
ref4 = nil // count = toujours 1 (car weak var et il reste une strong r√©f√©rence)

// de ce fait je peux toujours acc√©der √† ref3, la preuve:
print(ref3?.name)

// d√©f√©rencement du dernier objet strong
ref3 = nil // count = 0, l'objet est d√©sallou√© par l'ARC et le deinit se lance --> l'objet est supprim√© de la m√©moire



// MARK: - Retain cycle & Memory Leak
// Le retain cycle arrive lorsque deux objets se font des r√©f√©rences strong entre eux. Il faut visualiser √ßa un peu comme un cercle vicieux.
// Si les deux r√©f√©rences de l'un √† l'autre est de type strong alors il risque d'y avoir un probl√®me, pour l'ARC


class Person {
    var name: String
    var macbook: MacBookPro?

    init(name: String, macbook: MacBookPro?) {
        self.name = name
        self.macbook = macbook
    }

    deinit {
        print("\(name) weak / unowned exemple was killed by the ARC")
    }
}

class MacBookPro {
    var name: String
    var person: Person?
    
    init(name: String, person: Person?) {
        self.name = name
        self.person = person
    }
    
    deinit {
        print("\(name) de weak / unowned exemple was killed by the ARC")
    }
}

// D√©claration de nos variables optionnels ici afin de pouvoir les d√©f√©renc√© plus facilement en faisant var = nil
var lucas: Person?
var MBP: MacBookPro?

// Initialisation de nos variables
lucas = Person(name: "Lucas", macbook: nil) // on peut pas initialiser nos macbook √©tant donn√© qu'il ne l'est pas √©galement
MBP = MacBookPro(name: "MacBook Pro 13\" ", person: nil) // on n'itialise pas non plus la valeur de person

// MARK: Au niveau de l'arc on est au sch√©ma suivant:
// lucas fait une r√©f√©rence de type strong a Person
// MBP fait √©galement une r√©f√©rence de type strong √† MacBookPro
// MARK: Ici on a donc bien les deinit qui se lancent √©tant donn√© qu'on a qu'une seule r√©f√©rence pour chaque objet.

#warning("√Ä activer d√©sactiver")
//lucas = nil
//MBP = nil

// Maintenant initialisons les variables qui se font mutuellement r√©f√©rence
lucas?.macbook = MBP
MBP?.person = lucas

// MARK: Au niveau de l'ARC on est √† la chose suivante:
// Lucas fait une strong r√©f√©rence √† Person // Person = 1
// Lucas fait une strong r√©f√©rence √† MacBookPro via MBP // MacBookPro = 1
// MBP fait une strong r√©f√©rence √† Person via Lucas // Person = 2
// MBP fait une strong r√©f√©rence √† MacBookPro // MacBookPro = 2

 // MARK: Maintenant d√©nitialistion lucas par exemple. Logiquement on devrait avoir donc le deinit qui s'ex√©cute

lucas = nil // lucas = nil, ainsi count Person = 1


// √âtant donn√© qu'il y a encore une r√©f√©rence √† Person via MBP, l'objet n'est pas supprim√© de la m√©moire (puisque = 1)
// La preuve en printant le name de la person de mbp
print(MBP?.person?.name ?? "d√©truit")
// la preuve que lucas = nil
print(lucas?.name ?? "D√©truit")
print(lucas?.macbook?.name ?? "D√©truit")
// D'o√π le fait que le deinit ne s'est pas ex√©cut√©

// MARK: - A noter
MBP = nil // ne lance pas non plus le deinit de mbp

// Aucun deinit se lance car il reste toujours une r√©f√©rence strong √† chaque objet donc aucun objet n'est supprim√© de la m√©moire. Cela est du au fait qu'on a encore une r√©f√©rence √† chauqe objet:
// lucas.macbook // count de macbook = 1
// MBP.person // count de person = 1
// On ne peut plus acc√©der √† aucune propri√©t√© , pourtant plus aucunes var n'est plus initialis√© --> c'est ce qu'on appel MEMORY LEAK / Retain Cycle 
 
 
// MARK: Comment r√©soudre ce probl√®me ?
// La solution la plus simple et logique est de mettre une des deux propri√©t√© √† l'autre objet en weak ou unowned, bien qu'on puisse d√©clarer les deux propri√©t√© en tant que weak / unowned
// Ainsi il n'y aura pas de strong r√©f√©rence entre eux et ainsi, on casse le cercle vicieux de d√©but.
// MARK: Mais quel objet choisir dans ce cas ? Bonne question
// La r√©ponse est √ßa d√©pend car c'est pas si simple, √ßa vient avec l'exp√©rience. Au d√©but penser au fait suivant "Quel objet est le moins importants entre les deux ? Qui est la class parent et qui est la class enfant ?" (s√©mantiquement)
// Et cette propri√©t√© sera celle weak / unowned
// Dans ce cas je d√©cide que MacBookPro est un peu moins important que Person dans ce cas c'est la weak variable
//  => Car s√©mantiquement un MacBookPro appartient obligatoirement √† une Person
// ainsi j'aurai la class suivant

#warning("Exemple avec weak var")
class MacBookPro2 {
    var name: String
    weak var person: Person2? // type optionnel car obligatoire avec weak
    
    init(name: String, person: Person2?) {
        self.name = name
        self.person = person
    }
    deinit {
        print("\(name) weak exemple was killed by the ARC")
    }
}

class Person2 {
    var name: String
    var macbook: MacBookPro2?
    
    init(name: String, macbook: MacBookPro2?) {
        self.name = name
        self.macbook = macbook
    }
    
    deinit {
        print("\(name) of weak exemple was killed by the ARC")
    }
}

// MARK: De ce fait en faisant la m√™me chose qu'avant
// D√©claration de nos variables optionnels ici
var lucas2: Person2?
var MBP2: MacBookPro2?

// Initialisation de nos variables
lucas2 = Person2(name: "Lucas", macbook: nil) // on peut pas initialiser nos macbook √©tant donn√© qu'il ne l'est pas √©galement
MBP2 = MacBookPro2(name: "MacBook Pro 13\" ", person: nil) // on n'itialise pas non plus la valeur de person


lucas2?.macbook = MBP2
MBP2?.person = lucas2
// MARK: Au niveau de l'arc on est au sch√©ma suivant:
// lucas2 fait une r√©f√©rence de type strong a Person // person = 1
// Lucas2 fait une strong r√©f√©rence √† MacBookPro2 via MBP2 // MacBookPro2 = 1
// MBP2 fait une weak r√©f√©rence √† Person via Lucas2 // Person = toujours 1
// MBP2 fait une strong r√©f√©rence √† MacBookPro2 // MacBookPro2 = 2

// MARK: Ici on a donc bien les deinit qui se lancent √©tant donn√© qu'on a qu'une seule r√©f√©rence pour chaque objet.
lucas2 = nil // Ici on a bien le deinit qui s'ex√©cute √©tant donn√© que le count de lucas2 est √©gale √† 0

// Au niveau de l'arc √ßa donne le sch√©ma suivant
// count de lucas2 = 0 car le d√©init s'est ex√©cuter --> l'objet a √©t√© supprim√© de la m√©moire
// count de MacbooPro2 = 1 car lucas2.macbook √©tait une strong r√©f√©rence et donc sont compeut s'est d√©cr√©ment√© --> 2 - 1 = 1
MBP2 = nil


// Si vous savez que votre propri√©t√© "enfant" ne sera jamais nil alors pour vous pouvez la mette de type unowned

print("-----------------------------")

final class Person79 {
    var name: String
    var computer: Macbook79?
    
    init(name: String) {
        self.name = name
    }
    
    deinit {
        print("Person class d√©initialis√©")
    }
}

final class Macbook79 {
    var name: String
    unowned var owner: Person79
    
    init(name: String, owner: Person79) {
        self.name = name
        self.owner = owner
    }
    
    deinit {
        print("Macbook79 class d√©initialis√©")
    }
}


var lucas79: Person79?

lucas79 = Person79(name: "Lucas 79")
lucas79?.computer = Macbook79(name: "mbp 79", owner: lucas79!)

lucas79?.computer?.name = "jd"

lucas79?.name
lucas79?.computer?.name

lucas79 = nil



final class Club {
    var name: String
    var joueur: Joueur?
    
    init(name: String, joueur: Joueur?) {
        self.name = name
        self.joueur = joueur
    }
    
    deinit {
        print("Club d√©initialis√©")
    }
}

final class Joueur {
    var name: String
    unowned var club: Club
    
    init(name: String, club: Club) {
        self.name = name
        self.club = club
    }
    
    deinit {
        print("Class \(name) joueur d√©initialis√©")
    }
}

var psg: Club?
psg = Club(name: "PSG", joueur: nil)
psg?.joueur = Joueur(name: "Mbappe", club: psg!) // Cr√©er un objet d'@: 0x00003

//var mbappe: Joueur?
//mbappe = Joueur(name: "MBAPPE", club: psg!) // cr√©er un objet d'@: 0x003420
//
//
//mbappe?.club.joueur?.name
//mbappe?.name
//
//mbappe = nil

psg = nil

//mbappe = nil
