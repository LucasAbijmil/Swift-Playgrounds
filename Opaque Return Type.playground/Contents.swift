import Foundation
/*:
 # Opaque Return Type & `Some`
 * Uniquement pour des return dont le type est un protocol
 * PrÃ©sent notamment dans SwiftUI ğŸ‘‰ `var body: some View`
    * Le body s'attend Ã  Ãªtre de type `View` mais ne sait pas que quels `View` il sera composÃ©
 */
//: Disons que je veux implÃ©menter une fonction `getData` dont le `return` est un type conforme au protocol `Collection` (Array, Dictionnary etc...)
func getData() -> Collection {
  return [1, 2, 3, 4, 5]
}
/*:
 Raison de l'erreur du compilateur :
 * Le protocol `Collection` est un protocol avec un `associatedtype` (appellÃ© `Element`) ğŸ‘‡
    * On ne peut pas utiliser ce protocol comme un `return type` ou type de variable
    * On peut uniquement utiliser ce protocol comme une *generic constraint*
 */
/*:
 L'utilisation du mot clÃ© `some` rÃ©sout ce type de problÃ¨me ğŸ‘‡
 * Signification ğŸ‘‰ cette function return *some type* qui conforme au protocol retournÃ© (ici `Collection`)
 * GrÃ¢ce Ã  `some` le compilo connaÃ®t le type qui va Ãªtre retournÃ© par la fonction (ici Array)
 */
func getDatas() -> some Collection {
  return [1, 2, 3, 4, 5]
}
/*:
 **Limitation du `some`**
 * On ne peut retourner qu'un **unique** type qui est conforme au protocol retournÃ© pour un `opaque return type` ğŸ‘‡
 * On peut donc **soit retournÃ© un Array soit un Dictionnary**
 */
func getArrayOrDictionary() -> some Collection {
  return Bool.random() ? [1, 2, 3, 4, 5] : [1: "one", 2: "two", 3: "three", 4: "four", 5: "five"]
}
let data = getDatas()
data.count
//: * `element` n'est pas de type `Int` (mÃªme si le compilo le sait), mais de type `((some Collection).Element)?` ğŸ‘‰ due Ã  l'`opaque return type`
let element = data.randomElement()
//: * Si on veut utiliser `element` comme un `Int`, on fait un `cast` classique
if let element = element as? Int {
  print("I'm a Integer, here's my value : \(element)")
} else {
  print("I'm not a Integer")
}

func getOneTypeOfValue() -> some Equatable {
  return 0
}
let firstValue = getOneTypeOfValue()
let secondValue = getOneTypeOfValue()
/*:
 * VÃ©rifions l'Ã©galitÃ© de deux values venant d'un mÃªme `opaque return type`
    * Le code compile ğŸ‘‰ ces deux valeurs ont Ã©tÃ© obtenu grÃ¢ce Ã  la mÃªme fonction avec un `opaque return type`
    * Le type du `some Equatable` de `firstValue` & `secondValue` est donc le *mÃªme*
 */
firstValue == secondValue

func getAnotherTypeOfValue() -> some Equatable {
  return 1
}

let thirdValue = getAnotherTypeOfValue()
/*:
 * VÃ©rifions l'Ã©galitÃ© de deux values ne venant pas du mÃªme `opaque return type`
    * Le code ne compile pas ğŸ‘‰ ces deux valeurs ont Ã©tÃ© obtenu par deux fonctions diffÃ©rente avec un `opaque return type` potentiellement diffÃ©rent ğŸ‘‡
    * MÃªme si c'est deux fonctions retournent `some Equatable`, ce type peut Ãªtre diffÃ©rent d'une fonction Ã  l'autre
 */
firstValue == thirdValue
